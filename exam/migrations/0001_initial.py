# Generated by Django 4.1.2 on 2023-07-11 10:52

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Complaint',
            fields=[
                ('Complaint_id', models.IntegerField(primary_key=True, serialize=False)),
                ('track_code', models.CharField(default=False, max_length=15, unique=True)),
                ('Date', models.DateTimeField(auto_now=True, verbose_name='Date Submitted')),
                ('Registration_number', models.CharField(max_length=30)),
                ('Complaint_type', models.CharField(choices=[('Remark', 'Re-mark'), ('Missing_Marks', 'Missing marks')], max_length=30)),
                ('Paper_Code', models.CharField(max_length=30)),
                ('Paper_Name', models.CharField(max_length=100)),
                ('Year_Of_Exam', models.CharField(choices=[('Year_1', 'Year 1'), ('Year_2', 'Year 2'), ('Year_3', 'Year 3'), ('Year_4', 'Year 4'), ('Year_5', 'Year 5')], max_length=20)),
                ('Study_System', models.CharField(choices=[('Semester', 'Semester'), ('Quarter', 'Quarter'), ('Term', 'Term')], max_length=30)),
                ('Sem_Qter', models.CharField(choices=[('Semester_1', '1'), ('Semester_2', '2'), ('Semester_3', '3'), ('Semester_4', '4'), ('Semester_5', '5')], max_length=30)),
                ('Session', models.CharField(choices=[('DAY', 'DAY'), ('EVENING', 'EVENING'), ('WEEKEND', 'WEEKEND')], default=False, max_length=10)),
                ('Exam_office_approval', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Course_Name', models.CharField(max_length=200)),
                ('Course_Duration', models.CharField(max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='ExamOffice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Registration_Number', models.CharField(max_length=100)),
                ('Paper_Code', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Faculty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Faculty_Name', models.CharField(max_length=200)),
                ('Faculty_Coordinator', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Results',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Registration_Number', models.CharField(max_length=100)),
                ('Paper_Code', models.CharField(max_length=30)),
                ('Paper_Name', models.CharField(max_length=100)),
                ('Score', models.IntegerField()),
                ('Year', models.CharField(choices=[('Year_1', 'Year 1'), ('Year_2', 'Year 2'), ('Year_3', 'Year 3'), ('Year_4', 'Year 4'), ('Year_5', 'Year 5')], max_length=20)),
                ('Study_System', models.CharField(choices=[('Semester', 'Semester'), ('Quarter', 'Quarter'), ('Term', 'Term')], max_length=30)),
                ('Sem_Qter', models.CharField(choices=[('Semester_1', '1'), ('Semester_2', '2'), ('Semester_3', '3'), ('Semester_4', '4'), ('Semester_5', '5')], max_length=30)),
                ('Session', models.CharField(choices=[('DAY', 'DAY'), ('EVENING', 'EVENING'), ('WEEKEND', 'WEEKEND')], max_length=10)),
                ('Course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='exam.course')),
                ('Faculty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='exam.faculty')),
            ],
        ),
        migrations.CreateModel(
            name='Lecturer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(max_length=150)),
                ('Course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='exam.course')),
                ('Faculty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='exam.faculty')),
            ],
        ),
        migrations.AddField(
            model_name='course',
            name='Faculty',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='exam.faculty'),
        ),
        migrations.CreateModel(
            name='AR',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='exam.course')),
                ('Faculty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='exam.faculty')),
                ('Lecturer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='exam.lecturer')),
            ],
        ),
        migrations.CreateModel(
            name='Accounts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Amount_Paid', models.IntegerField()),
                ('results_copy', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='exam.results')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_student', models.BooleanField(default=False)),
                ('is_examoffice', models.BooleanField(default=False)),
                ('is_ar', models.BooleanField(default=False)),
                ('is_accounts', models.BooleanField(default=False)),
                ('is_store', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
